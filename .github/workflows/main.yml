name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      company_name:
        description: "The name of the company or client (e.g., acme-corp)."
        required: true
      environment_name:
        description: "The name of the environment (e.g., production, staging)."
        required: true
      application_repo:
        description: "The full name of the application repository to deploy (e.g., your-org/cloudwatch-automatic-dashboard)."
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy-to-aws:
    name: Deploy ${{ github.event.inputs.application_repo }} to ${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            *.actions.githubusercontent.com:443
            sts.amazonaws.com:443
            sts.ap-southeast-1.amazonaws.com:443
            sts.us-east-1.amazonaws.com:443
            ssm.ap-southeast-1.amazonaws.com:443
            ssm.us-east-1.amazonaws.com:443
            cloudformation.ap-southeast-1.amazonaws.com:443
            cloudformation.us-east-1.amazonaws.com:443
            s3.amazonaws.com:443
            s3.ap-southeast-1.amazonaws.com:443
            s3.us-east-1.amazonaws.com:443

      - name: Checkout Application Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.application_repo }}
          path: app

      - name: Determine Target Environment
        run: |
          TARGET_ENV="${{ github.event.inputs.company_name }}-${{ github.event.inputs.environment_name }}"
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV

      - name: Load Config and Generate Parameters
        id: load_config
        working-directory: ./app
        run: |
          CONFIG_JSON=$(jq -r --arg TARGET_ENV "$TARGET_ENV" '.[$TARGET_ENV]' config.json)
          OVERRIDES=$(echo "$CONFIG_JSON" | jq -r 'to_entries | .[] | select(.key != "ssm_parameter_for_role") | .key + "=" + (.value|tostring)' | tr '\n' ' ')
          SSM_PARAM_NAME=$(echo "$CONFIG_JSON" | jq -r '.ssm_parameter_for_role')
          S3_BUCKET=$(echo "$CONFIG_JSON" | jq -r '.LambdaCodeS3Bucket')
          STACK_NAME=$(echo "$CONFIG_JSON" | jq -r '.Name')
          echo "overrides_string=$OVERRIDES" >> $GITHUB_OUTPUT
          echo "SSM_PARAM_NAME=$SSM_PARAM_NAME" >> $GITHUB_ENV
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV
          echo "S3_KEY=function-${{ github.sha }}.zip" >> $GITHUB_ENV

      - name: Configure AWS Credentials for Tooling Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TOOLING_ACCOUNT_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION || 'ap-southeast-1' }}

      - name: Get Target Deployment Role ARN from SSM
        id: get_role
        run: |
          echo "Fetching target deployment role ARN..."
          TARGET_ROLE_ARN=$(aws ssm get-parameter --name "${{ env.SSM_PARAM_NAME }}" --with-decryption --query "Parameter.Value" --output text)
          echo "::add-mask::$TARGET_ROLE_ARN"
          echo "aws_role_to_assume=${TARGET_ROLE_ARN}" >> $GITHUB_ENV

      - name: Assume Final Deployment Role in Target Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.aws_role_to_assume }}
          aws-region: ${{ env.AWS_REGION || 'ap-southeast-1' }}
          role-session-name: GitHubActions-AppDeploy-${{ github.run_id }}

      - name: Package and Upload Application Artifact
        run: |
          echo "Packaging application..."
          cd app/lambda
          zip -r ../../${{ env.S3_KEY }} . > /dev/null
          cd ../..
          echo "Uploading artifact to s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}"
          aws s3 cp ${{ env.S3_KEY }} s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}

      - name: Deploy CloudFormation Stack
        run: |
          echo "Deploying application stack: ${{ env.STACK_NAME }}"
          aws cloudformation deploy \
            --template-file app/deployer.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides ${{ steps.load_config.outputs.overrides_string }} LambdaCodeS3Bucket=${{ env.S3_BUCKET }} LambdaCodeS3Key=${{ env.S3_KEY }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset > /dev/null
